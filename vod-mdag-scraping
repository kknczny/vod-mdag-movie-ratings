from bs4 import BeautifulSoup
from urllib.request import urlopen
import ssl
import time
# from rotten_tomatoes_client.client import RottenTomatoesClient
import pandas as pd
from imdb import Cinemagoer

pd.options.mode.chained_assignment = None       #  Suppres Pandas SettingWithCopyWaring

class AddRatingsFromPage():

    def __init__(
        self,
        url: str = "https://vod.mdag.pl/pl/filmy",
        test_subset: int = None
    ):
        self.url = url
        self.test_subset: test_subset

    def scrap_page(self):
        titles = pd.DataFrame()

        context = ssl.SSLContext(ssl.PROTOCOL_TLS)
        with urlopen(url, context=context) as response:
            soup = BeautifulSoup(response, "html.parser")
        
        titles['title'] = [value.string for value in soup.find_all("div", "moviebox-desc")]
        titles['title_pl'] = [value.string for value in soup.find_all("div", "moviebox-title")]
        
        ##add also a step to go into movie subpage based on link and get additional information such as year
        
        if self.test_subset:
            titles = titles.head(self.test_subset)

        self.titles = titles

        if len(titles) == 1:
            print(f"Found on page: {len(titles)} title")
        elif len(titles) > 1:
            print(f"Found on page: {len(titles)} titles")
        else:
            print("No titles found on page")

    
        return titles

    # sample_title = list(titles.values())[0]

    # print(f"sample title from website: {sample_title}")


    def get_ratings(self):
        print("Starting obtaining ratings")
        start = time.time()
        
        titles = self.titles

        ia = Cinemagoer()

        for title in titles['title']:
            imdb_movies = ia.search_movie(title.strip())
            movie_id = str(imdb_movies[0].movieID)
            movie = ia.get_movie(movie_id)

            titles['imdb_title'] = str(imdb_movies[0])
            titles['names_match'] = (titles['title']==titles['imdb_title']).astype(int) ##add also comparison for year once obtained for vod movies
            
            titles['imdb_id'] = movie_id
            
            titles['year'] = movie['year']
            # titles['countries']

            titles['rating'] = movie['rating']
            titles['votes'] = movie['votes']
        
        end = time.time()

        print(f"Obtaining ratings finished. It took: {end-start} seconds.")
        print(titles)

        # print(imdb_movies.keys())
        # movie = ia.get_movie('9634036')

    def get_ratings_from_url(self):
        self.get_ratings(self.scrap_page())
        



if __name__ == "__main__":
    